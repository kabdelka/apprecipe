{"version":3,"sources":["Componenet/Navbar.js","Componenet/Header.jsx","Componenet/Cards.jsx","App.js","serviceWorker.js","index.js","logo.svg"],"names":["navbar","props","className","text","Search","Input","Header","fetchData","placeholder","onSearch","value","style","width","height","Panel","Collapse","Cards","name","calories","image","ingredients","size","src","Math","floor","header","map","ing","idx","key","App","useState","data","setData","loading","setLoading","a","axios","get","response","console","log","count","alert","Navbar","hits","recipe","index","label","ingredientLines","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"0LAOeA,G,YALC,SAACC,GAChB,OACC,yBAAKC,UAAU,UAAUD,EAAME,QCDzBC,E,OAAWC,EAAXD,OAaOE,EAXA,SAAC,GAAiB,IAAhBC,EAAe,EAAfA,UAChB,OAAQ,yBAAKL,UAAU,UACtB,kBAACE,EAAD,CAAQF,UAAU,SACdM,YAAY,0BACZC,SAAU,SAAAC,GAAK,OAAIH,EAAUG,IAC7BC,MAAO,CAAEC,MAAO,MAAQC,OAAO,Q,kBCN7BC,EAAUC,IAAVD,MAuBOE,EArBD,SAAC,GAAuC,IAAtCC,EAAqC,EAArCA,KAAKC,EAAgC,EAAhCA,SAASC,EAAuB,EAAvBA,MAAMC,EAAiB,EAAjBA,YACnC,OAEE,yBAAKlB,UAAU,QACd,yBAAKA,UAAU,UACd,kBAAC,IAAD,CAAQA,UAAU,OAAOmB,KAAM,IAAKC,IAAKH,KAE1C,yBAAKjB,UAAU,eACd,yBAAKA,UAAU,gBAAgBe,GAC/B,yBAAKf,UAAU,cAAf,UAAgCqB,KAAKC,MAAMN,GAA3C,QAED,yBAAKhB,UAAU,kBACd,kBAAC,IAAD,KACA,kBAACY,EAAD,CAAOW,OAAO,eAAeL,EAAYM,KAAI,SAACC,EAAIC,GAAL,OAAW,yBAAKC,IAAKD,GAAMD,W,kCC6C9DG,MAvDf,WAAgB,IAAD,EAEUC,mBAAS,MAFnB,mBAENC,EAFM,KAEDC,EAFC,OAGgBF,oBAAS,GAHzB,mBAGNG,EAHM,KAGEC,EAHF,KAIP5B,EAAS,uCAAI,WAAOG,GAAP,eAAA0B,EAAA,6DACfD,GAAW,GACI,gCACH,WACC,mCAJE,kBAOQE,IAAMC,IAAN,UALR,gCAKQ,cAA2B5B,EAA3B,mBAJX,WAIW,oBAHV,mCAGU,kBAPR,OAOT6B,EAPS,OAQfC,QAAQC,IAAIF,GACZN,EAAQM,EAASP,MACjBG,GAAW,GAEe,IAAtBI,EAASP,KAAKU,QAChBT,EAAQ,MACRE,GAAW,IAdE,kDAmBbF,EAAQ,MACRE,GAAW,GACXQ,MAAM,EAAD,IArBQ,0DAAJ,sDA4Bf,OACE,yBAAKzC,UAAU,QACb,kBAAC0C,EAAD,CAAQzC,KAAK,eACb,yBAAKD,UAAU,aACX,kBAAC,EAAD,CAAQK,UAAWA,IACrB,yBAAKL,UAAU,mBACZgC,EAAQ,6BAAK,kBAAC,IAAD,OACZ,oCACCF,EAAM,oCACNA,EAAKa,KAAKnB,KAAI,SAACoB,EAAOC,GAAR,OAAiB,kBAAC,EAAD,CAAOlB,IAAKkB,EAAO9B,KAAM6B,EAAOA,OAAOE,MAAO9B,SAAU4B,EAAOA,OAAO5B,SAAUC,MAAO2B,EAAOA,OAAO3B,MAAOC,YAAa0B,EAAOA,OAAOG,sBAClK,kBAAC,IAAD,WCvCGC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,a,6EEzI5BC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.c0ecd3ce.chunk.js","sourcesContent":["import React from 'react';\n\n const navbar = (props) => {\n\treturn (\n\t\t<div className=\"navbar\">{props.text}</div>\n\t\t)\n};\nexport default navbar;","import React from 'react'\nimport { Input } from 'antd';\n\nconst { Search } = Input;\n\nconst Header = ({fetchData}) => {\n\treturn (<div className=\"header\">\n\t\t<Search className='search'\n      placeholder=\"chicken, beef, porc ...\"\n      onSearch={value => fetchData(value)}\n      style={{ width: \"60%\" , height:50 }}\n    />\n\t</div>)\n}\n\n\nexport default Header;","import React from 'react';\nimport { Avatar } from 'antd';\nimport { Collapse } from 'antd';\n\nconst { Panel } = Collapse;\n\nconst Cards = ({name,calories,image,ingredients}) => {\n\treturn (\n\t\t\n\t\t\t<div className=\"card\">\n\t\t\t\t<div className=\"avatar\"> \n\t\t\t\t\t<Avatar className=\"icon\" size={180} src={image}/>\n\t\t\t\t</div>\n\t\t\t\t<div className='recipe-info'>\n\t\t\t\t\t<div className=\"recipe-title\">{name}</div>\n\t\t\t\t\t<div className=\"recipe-kca\">{`${Math.floor(calories)}Ca`}</div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"recipe-details\">\n\t\t\t\t\t<Collapse>\n\t\t\t\t\t<Panel header=\"Ingredients\">{ingredients.map((ing,idx)=><div key={idx}>{ing}</div>)}</Panel>\n\t\t\t\t\t</Collapse>\n\t\t\t\t</div>\n\t\t</div>\n\t\t\n\t\t)\n}\n\nexport default Cards ;","import React , {useState} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Navbar from './Componenet/Navbar.js'\nimport Header from './Componenet/Header.jsx'\nimport Cards from './Componenet/Cards.jsx'\nimport axios from 'axios';\nimport { Empty } from 'antd';\nimport { Spin } from 'antd';\nfunction App() {\n\n  const [data,setData] = useState(null)\n  const [loading,setLoading] = useState(false);\n  const fetchData =  async (value) => {\n      setLoading(true);\n    const endPoint = \"https://api.edamam.com/search\";\n    const appId = \"5cb589b2\";\n    const appKey = \"1a4fc1dbce5174236451fef8b0139eff\";\n\n    try {\n      const response = await axios.get(`${endPoint}?q=${value}&app_id=${appId}&app_key=${appKey}&from=0&to=24`)\n      console.log(response);\n      setData(response.data)\n      setLoading(false);\n\n      if (response.data.count===0) {\n        setData(null)\n        setLoading(false)\n      }\n      }\n\n      catch(err){\n        setData(null)\n        setLoading(false)\n        alert(err);\n      }\n\n  }\n\n\n\n  return (\n    <div className='page'>\n      <Navbar text='Recipe App'/>\n      <div className=\"container\">\n          <Header fetchData={fetchData}/>\n        <div className=\"cards-container\">\n          {loading?<div><Spin/></div>:\n            <>\n            {data? <>\n            {data.hits.map((recipe,index)=> <Cards key={index} name={recipe.recipe.label} calories={recipe.recipe.calories} image={recipe.recipe.image} ingredients={recipe.recipe.ingredientLines}/>)}\n            </>: <Empty/>\n            }\n            </>\n          }\n          \n        \n\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}